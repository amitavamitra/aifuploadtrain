<!-- create the yaml file from inputs -->
<%- include('partials/header'); -%>
<h1>Create argo Workflow Template</h1>
<body>
    <!-- <form action="/create_argoWT" method="post"> -->
        <form class="content__form contact-form"  action="" method="get"></form>
    <div class="form-row   contact-form__input-group">
    <div class="col">
    <input type="text"  name="apiVersion" id="apiVersion" class="form-control" value="argoproj.io/v1alpha1">
    </div>
    <div class="col">
    <input type="text"  name="kind" id="kind" class="form-control" value="WorkflowTemplate">
    </div>
    <label for="">metadata:</label>
    <div class="col">
    <input type="text"  name="name" id="name" class="form-control" value="crud2305">
    </div>
    <div class="col">
    <input type="text"  name="generateName" id="generateName" class="form-control" value="argo-crud-template-">
    </div>
    <hr>
    <label for="">annotations:</label>
        <div class="form-group row">
            <label for="scenarios_description" class=" contact-form__label col-sm-4 col-form-label">scenarios.ai.sap.com/description:</label>
            <div class="col-sm-8">
              <input type="text" name="scenarios_description" class="form-control contact-form__input contact-form__input--text" id="scenarios_description" placeholder="A Meaningful Description">
            </div>
          </div>
        <div class="form-group row">
            <label for="scenarios_name" class="col-sm-4 col-form-label">scenarios.ai.sap.com/name:</label>
            <div class="col-sm-8">
              <input type="text" name="scenarios_name" class="form-control contact-form__input contact-form__input--text" id="scenarios_name" value="crud2305">
            </div>
          </div>
          <div class="form-group row">
            <label for="executables_name" class="col-sm-4 col-form-label">executables.ai.sap.com/name:</label>
            <div class="col-sm-8">
              <input type="text" name="executables_name" class="form-control" id="executables_name" value="crud2305">
            </div>
          </div>
        <div class="form-group row">
            <label for="executables_description" class="col-sm-4 col-form-label">executables.ai.sap.com/description:</label>
            <div class="col-sm-8">
              <input type="text" name="executables_description" class="form-control" id="executables_description" value="crud2305">
            </div>
          </div>
          <div class="form-group row">
            <label for="artifacts_datakind" class="col-sm-4 col-form-label">artifacts.ai.sap.com/training-data.kind:</label>
            <div class="col-sm-8">
              <input type="text" name="artifacts_datakind" class="form-control" id="artifacts_datakind" value='"dataset"'>
            </div>
          </div>
        <div class="form-group row">
            <label for="artifacts_modelkind" class="col-sm-4 col-form-label">artifacts.ai.sap.com/model.kind:</label>
            <div class="col-sm-8">
              <input type="text" name="artifacts_modelkind" class="form-control" id="artifacts_modelkind" value='"model"'>
            </div>
          </div>
          <hr>
          <label for="">labels:</label>
          <div class="form-group row">
            <label for="ai_version" class="col-sm-4 col-form-label">ai.sap.com/version:</label>
            <div class="col-sm-8">
              <input type="text" name="ai_version" class="form-control" id="ai_version" value='0.1.0'>
            </div>
          </div>
          <div class="form-group row">
            <label for="scenarios_id" class="col-sm-4 col-form-label">scenarios.ai.sap.com/id:</label>
            <div class="col-sm-8">
              <input type="text" name="scenarios_id" class="form-control" id="scenarios_id" value='crud'>
            </div>
          </div>
          <hr>
          <label for="">spec:</label>
          <br>
          <label for="">imagePullSecrets:</label>
          <div class="form-group row">
            <label for="docker_secret" class="col-sm-4 col-form-label">- name:</label>
            <div class="col-sm-8">
              <input type="text" name="docker_secret" class="form-control" id="docker_secret" value='amit-docker-registry-secret'>
            </div>
          </div>
          <div class="form-group row">
            <label for="entrypoint:" class="col-sm-4 col-form-label">entrypoint:</label>
            <div class="col-sm-8">
              <input type="text" name="entrypoint" class="form-control" id="entrypoint" value='crud'>
            </div>
          </div>

          <div>
            <input name:"query" type="hidden" id="demo" value="query:{}"/>
            </div>
            
            <button class="contact-form__button" type="submit">Send It!</button>
    </div>

    
    </form>
    <section>
        <div class="results">
            <h2 class="results__heading">Form Data</h2>
            <pre class="results__display-wrapper"><code class="results__display"></code></pre>
          </div>
    </section>

    <script>
        /**
     * Checks that an element has a non-empty `name` and `value` property.
     * @param  {Element} element  the element to check
     * @return {Bool} true if the element is an input, false if not
     */
    const isValidElement = element => {
      return element.name && element.value;
    };
    
    /**
     * Checks if an element’s value can be saved (e.g. not an unselected checkbox).
     * @param  {Element} element  the element to check
     * @return {Boolean}          true if the value should be added, false if not
     */
    const isValidValue = element => {
      return !["checkbox", "radio"].includes(element.type) || element.checked;
    };
    
    /**
     * Checks if an input is a checkbox, because checkboxes allow multiple values.
     * @param  {Element} element  the element to check
     * @return {Boolean}          true if the element is a checkbox, false if not
     */
    const isCheckbox = element => element.type === "checkbox";
    
    /**
     * Checks if an input is a `select` with the `multiple` attribute.
     * @param  {Element} element  the element to check
     * @return {Boolean}          true if the element is a multiselect, false if not
     */
    const isMultiSelect = element => element.options && element.multiple;
    
    /**
     * Retrieves the selected options from a multi-select as an array.
     * @param  {HTMLOptionsCollection} options  the options for the select
     * @return {Array}                          an array of selected option values
     */
    const getSelectValues = options =>
      [].reduce.call(
        options,
        (values, option) => {
          return option.selected ? values.concat(option.value) : values;
        },
        []
      );
    
    /**
     * A more verbose implementation of `formToJSON()` to explain how it works.
     *
     * NOTE: This function is unused, and is only here for the purpose of explaining how
     * reducing form elements works.
     *
     * @param  {HTMLFormControlsCollection} elements  the form elements
     * @return {Object}                               form data as an object literal
     */
    const formToJSON_deconstructed = elements => {
      // This is the function that is called on each element of the array.
      const reducerFunction = (data, element) => {
        // Add the current field to the object.
        data[element.name] = element.value;
    
        // For the demo only: show each step in the reducer’s progress.
        console.log(JSON.stringify(data));
    
        return data;
      };
    
      // This is used as the initial value of `data` in `reducerFunction()`.
      const reducerInitialValue = {};
    
      // To help visualize what happens, log the inital value, which we know is `{}`.
      console.log("Initial `data` value:", JSON.stringify(reducerInitialValue));
    
      // Now we reduce by `call`-ing `Array.prototype.reduce()` on `elements`.
      const formData = [].reduce.call(
        elements,
        reducerFunction,
        reducerInitialValue
      );
    
      // The result is then returned for use elsewhere.
      return formData;
    };
    
    /**
     * Retrieves input data from a form and returns it as a JSON object.
     * @param  {HTMLFormControlsCollection} elements  the form elements
     * @return {Object}                               form data as an object literal
     */
    const formToJSON = elements =>
      [].reduce.call(
        elements,
        (data, element) => {
          // Make sure the element has the required properties and should be added.
          if (isValidElement(element) && isValidValue(element)) {
            /*
         * Some fields allow for more than one value, so we need to check if this
         * is one of those fields and, if so, store the values as an array.
         */
            if (isCheckbox(element)) {
              data[element.name] = (data[element.name] || []).concat(element.value);
            } else if (isMultiSelect(element)) {
              data[element.name] = getSelectValues(element);
            } else {
              data[element.name] = element.value;
            }
          }
    
          return data;
        },
        {}
      );
    
    /**
     * A handler function to prevent default submission and run our custom script.
     * @param  {Event} event  the submit event triggered by the user
     * @return {void}
     */
    const handleFormSubmit = event => {
      // Stop the form from submitting since we’re handling that with AJAX.
      event.preventDefault();
    
      // Call our function to get the form data.
      const data = formToJSON(form.elements);
    
      // Demo only: print the form data onscreen as a formatted JSON object.
      const dataContainer = document.getElementsByClassName("results__display")[0];
    
      // Use `JSON.stringify()` to make the output valid, human-readable JSON.
      dataContainer.textContent = JSON.stringify(data, null, "  ");
    
      // ...this is where we’d actually do something with the form data...
    };
    
    /*
     * This is where things actually get started. We find the form element using
     * its class name, then attach the `handleFormSubmit()` function to the 
     * `submit` event.
     */
    var form = document.getElementsByClassName("contact-form")[0];
    if (form){
        form.addEventListener("submit", handleFormSubmit, false);
    }
    
    /* adding more background info to grab from user */
    function myFunction() {
        var z = document.getElementById("query").value;
      var x = navigator.userAgent;
        var y = Intl.DateTimeFormat().resolvedOptions().timeZone;
        var obj = {"browser_timezone" : String(y),"user_agent" : String(x),"query": String(z)};
        var myJSON = JSON.stringify(obj);
        document.getElementById("demo").innerHTML = myJSON;
    }
    if(window.attachEvent) {
        window.attachEvent('onload', myFunction);
    } else {
        if(window.onload) {
            var curronload = window.onload;
            var newonload = function(evt) {
                curronload(evt);
                myFunction(evt);
            };
            window.onload = newonload;
        } else {
            window.onload = myFunction;
        }
    }
    </script>

</body>